name: E2E Tests (PR)

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  e2e-tests-pr:
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          NODE_ENV: production
          PORT: 2112

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:2112; do sleep 2; done'

      - name: Run E2E tests
        run: npx playwright test --project=chromium --project=firefox
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:2112

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-pr
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read test results if they exist
            let testResults = 'Test results are being processed...';

            try {
              if (fs.existsSync('test-results/e2e-results.json')) {
                const results = JSON.parse(fs.readFileSync('test-results/e2e-results.json', 'utf8'));
                const stats = results.stats;
                
                testResults = `## E2E Test Results
                
                **Status:** ${stats.failures > 0 ? '❌ Failed' : '✅ Passed'}
                
                - **Total Tests:** ${stats.total}
                - **Passed:** ${stats.passed}
                - **Failed:** ${stats.failed}
                - **Skipped:** ${stats.skipped}
                
                ${stats.failures > 0 ? '❌ Some tests failed. Check the artifacts for detailed results.' : '✅ All tests passed!'}`;
              }
            } catch (error) {
              testResults = '❌ Unable to read test results. Check the workflow logs for details.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testResults
            });
