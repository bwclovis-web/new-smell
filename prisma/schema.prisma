generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String
  firstName             String?
  lastName              String?
  username              String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(user)
  UserPerfume           UserPerfume[]
  userPerfumeComments   UserPerfumeComment[]
  UserPerfumeRating     UserPerfumeRating[]
  UserPerfumeReview     UserPerfumeReview[]
  UserPerfumeWishlist   UserPerfumeWishlist[]
  wishlistNotifications WishlistNotification[]
}

model PerfumeHouse {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  website     String?
  country     String?
  founded     String?
  email       String?
  phone       String?
  address     String?
  type        HouseType @default(indie)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  perfumes    Perfume[]
}

model Perfume {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  slug                  String                 @unique
  description           String?
  image                 String?
  perfumeHouseId        String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  perfumeHouse          PerfumeHouse?          @relation(fields: [perfumeHouseId], references: [id])
  perfumeNotesClose     PerfumeNotes[]         @relation("PerfumeNotesBase")
  perfumeNotesHeart     PerfumeNotes[]         @relation("PerfumeNotesHeart")
  perfumeNotesOpen      PerfumeNotes[]         @relation("PerfumeNotesOpen")
  userPerfume           UserPerfume[]
  userPerfumeComments   UserPerfumeComment[]
  userPerfumeRating     UserPerfumeRating[]
  userPerfumeReview     UserPerfumeReview[]
  userPerfumeWishlist   UserPerfumeWishlist[]
  wishlistNotifications WishlistNotification[]
}

model UserPerfume {
  id              String               @id @default(cuid())
  userId          String
  perfumeId       String
  amount          String               @default("0")
  available       String               @default("0")
  price           String?
  placeOfPurchase String?
  tradePrice      String?
  tradePreference TradePreference      @default(cash)
  tradeOnly       Boolean              @default(false)
  createdAt       DateTime             @default(now())
  type            PerfumeType          @default(eauDeParfum)
  perfume         Perfume              @relation(fields: [perfumeId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])
  comments        UserPerfumeComment[]
}

model UserPerfumeRating {
  id         String   @id @default(cuid())
  userId     String
  perfumeId  String
  createdAt  DateTime @default(now())
  gender     Int?
  longevity  Int?
  overall    Int?
  priceValue Int?
  sillage    Int?
  updatedAt  DateTime @updatedAt
  perfume    Perfume  @relation(fields: [perfumeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, perfumeId])
}

model UserPerfumeReview {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  review    String
  createdAt DateTime @default(now())
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model UserPerfumeWishlist {
  id        String   @id @default(cuid())
  userId    String
  isPublic  Boolean  @default(false)
  perfumeId String
  createdAt DateTime @default(now())
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model UserPerfumeComment {
  id            String      @id @default(cuid())
  userId        String
  perfumeId     String
  userPerfumeId String
  comment       String
  isPublic      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  perfume       Perfume     @relation(fields: [perfumeId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  userPerfume   UserPerfume @relation(fields: [userPerfumeId], references: [id])
}

model PerfumeNotes {
  id             String   @id @default(cuid())
  name           String   @unique
  createdAt      DateTime @default(now())
  perfumeOpenId  String?
  perfumeHeartId String?
  perfumeCloseId String?
  perfumeClose   Perfume? @relation("PerfumeNotesBase", fields: [perfumeCloseId], references: [id])
  perfumeHeart   Perfume? @relation("PerfumeNotesHeart", fields: [perfumeHeartId], references: [id])
  perfumeOpen    Perfume? @relation("PerfumeNotesOpen", fields: [perfumeOpenId], references: [id])
}

model WishlistNotification {
  id         String   @id @default(cuid())
  userId     String
  perfumeId  String
  notifiedAt DateTime @default(now())
  perfume    Perfume  @relation(fields: [perfumeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, perfumeId])
}

enum UserRole {
  user
  admin
  editor
}

enum HouseType {
  niche
  designer
  indie
  celebrity
  drugstore
}

enum PerfumeType {
  eauDeParfum
  eauDeToilette
  eauDeCologne
  parfum
  extraitDeParfum
  extraitOil
  oil
  waterMist
  ipmSpray
}

enum TradePreference {
  cash
  trade
  both
}
