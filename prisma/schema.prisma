generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma-app/client"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  password              String
  name                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  UserPerfume           UserPerfume[]
  UserPerfumeRating     UserPerfumeRating[]
  UserPerfumeReview     UserPerfumeReview[]
  UserPerfumeWishlist   UserPerfumeWishlist[]
  UserPerfumeCollection UserPerfumeCollection[]
  role                  UserRole                @default(user)
}

enum UserRole {
  user
  admin
}

model PerfumeHouse {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  website     String?
  country     String?
  founded     String?
  email       String?   @unique
  phone       String?
  address     String?
  type        HouseType @default(indie)
  perfumes    Perfume[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Perfume {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  description           String?
  image                 String?
  perfumeHouse          PerfumeHouse?           @relation(fields: [perfumeHouseId], references: [id])
  perfumeHouseId        String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userPerfume           UserPerfume[]
  userPerfumeRating     UserPerfumeRating[]
  userPerfumeReview     UserPerfumeReview[]
  userPerfumeWishlist   UserPerfumeWishlist[]
  userPerfumeCollection UserPerfumeCollection[]
  perfumeNotesOpen      PerfumeNotes[]          @relation("PerfumeNotesOpen")
  perfumeNotesHeart     PerfumeNotes[]          @relation("PerfumeNotesHeart")
  perfumeNotesClose     PerfumeNotes[]          @relation("PerfumeNotesBase")
}

model UserPerfume {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  user      User     @relation(fields: [userId], references: [id])
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  createdAt DateTime @default(now())
}

model UserPerfumeRating {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  createdAt DateTime @default(now())
}

model UserPerfumeReview {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  review    String
  user      User     @relation(fields: [userId], references: [id])
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  createdAt DateTime @default(now())
}

model UserPerfumeWishlist {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  user      User     @relation(fields: [userId], references: [id])
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  createdAt DateTime @default(now())
}

model UserPerfumeCollection {
  id        String   @id @default(cuid())
  userId    String
  perfumeId String
  user      User     @relation(fields: [userId], references: [id])
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  createdAt DateTime @default(now())
}

model PerfumeNotes {
  id             String   @id @default(cuid())
  name           String   @unique
  createdAt      DateTime @default(now())
  perfumeOpenId  String?
  perfumeHeartId String?
  perfumeCloseId String?

  perfumeOpen  Perfume? @relation("PerfumeNotesOpen", fields: [perfumeOpenId], references: [id])
  perfumeHeart Perfume? @relation("PerfumeNotesHeart", fields: [perfumeHeartId], references: [id])
  perfumeClose Perfume? @relation("PerfumeNotesBase", fields: [perfumeCloseId], references: [id])
}

enum HouseType {
  niche
  designer
  indie
  celebrity
  drugstore
}
