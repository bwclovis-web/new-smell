generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiNjAyM2MyMjMtNzc1YS00MTA1LWExMmYtZWZjNzg1MjJlOWJmIiwidGVuYW50X2lkIjoiYTk4Nzc2ZTVmNzEzNWVlZWNiMzIwYTMwMjc3ZWFiNzk1ZjkxYjlmZDM3ODNlNzJmMzNlZDgwZDM2YzU0YzNjMSIsImludGVybmFsX3NlY3JldCI6IjU0NTQyODg0LTY0ZDItNGEyNS04YTgxLTY1ODgwOTUwYzFmNyJ9.kd6Lq7bADQ59I_7Kj0sKC_Co1-19NFpNx-5cMSKOG6o"
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  password             String
  firstName            String?
  lastName             String?
  username             String?                @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  role                 UserRole               @default(user)
  sessions             Session[]
  UserPerfume          UserPerfume[]
  UserPerfumeComment   UserPerfumeComment[]
  UserPerfumeRating    UserPerfumeRating[]
  UserPerfumeReview    UserPerfumeReview[]
  UserPerfumeWishlist  UserPerfumeWishlist[]
  WishlistNotification WishlistNotification[]

  @@map("User")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([isActive])
  @@map("Session")
}

model PerfumeHouse {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  website     String?
  country     String?
  founded     String?
  email       String?
  phone       String?
  address     String?
  type        HouseType @default(indie)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  slug        String    @unique
  perfumes    Perfume[]

  @@map("PerfumeHouse")
}

model Perfume {
  id                                                String                 @id @default(cuid())
  name                                              String                 @unique
  description                                       String?
  image                                             String?
  perfumeHouseId                                    String?
  createdAt                                         DateTime               @default(now())
  updatedAt                                         DateTime               @updatedAt
  slug                                              String                 @unique
  PerfumeHouse                                      PerfumeHouse?          @relation(fields: [perfumeHouseId], references: [id])
  PerfumeNotes_PerfumeNotes_perfumeCloseIdToPerfume PerfumeNotes[]         @relation("PerfumeNotes_perfumeCloseIdToPerfume")
  PerfumeNotes_PerfumeNotes_perfumeHeartIdToPerfume PerfumeNotes[]         @relation("PerfumeNotes_perfumeHeartIdToPerfume")
  PerfumeNotes_PerfumeNotes_perfumeOpenIdToPerfume  PerfumeNotes[]         @relation("PerfumeNotes_perfumeOpenIdToPerfume")
  UserPerfume                                       UserPerfume[]
  UserPerfumeComment                                UserPerfumeComment[]
  UserPerfumeRating                                 UserPerfumeRating[]
  UserPerfumeReview                                 UserPerfumeReview[]
  UserPerfumeWishlist                               UserPerfumeWishlist[]
  WishlistNotification                              WishlistNotification[]

  @@map("Perfume")
}

model PerfumeNotes {
  id                                           String   @id
  name                                         String   @unique
  createdAt                                    DateTime @default(now())
  perfumeOpenId                                String?
  perfumeHeartId                               String?
  perfumeCloseId                               String?
  Perfume_PerfumeNotes_perfumeCloseIdToPerfume Perfume? @relation("PerfumeNotes_perfumeCloseIdToPerfume", fields: [perfumeCloseId], references: [id])
  Perfume_PerfumeNotes_perfumeHeartIdToPerfume Perfume? @relation("PerfumeNotes_perfumeHeartIdToPerfume", fields: [perfumeHeartId], references: [id])
  Perfume_PerfumeNotes_perfumeOpenIdToPerfume  Perfume? @relation("PerfumeNotes_perfumeOpenIdToPerfume", fields: [perfumeOpenId], references: [id])
}

model UserPerfume {
  id                 String               @id
  userId             String
  perfumeId          String
  amount             String               @default("0")
  available          String               @default("0")
  price              String?
  placeOfPurchase    String?
  tradePrice         String?
  tradePreference    TradePreference      @default(cash)
  tradeOnly          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  type               PerfumeType          @default(eauDeParfum)
  Perfume            Perfume              @relation(fields: [perfumeId], references: [id])
  User               User                 @relation(fields: [userId], references: [id])
  UserPerfumeComment UserPerfumeComment[]
}

model UserPerfumeComment {
  id            String      @id
  userId        String
  perfumeId     String
  userPerfumeId String
  comment       String
  isPublic      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Perfume       Perfume     @relation(fields: [perfumeId], references: [id])
  User          User        @relation(fields: [userId], references: [id])
  UserPerfume   UserPerfume @relation(fields: [userPerfumeId], references: [id])
}

model UserPerfumeRating {
  id         String   @id
  userId     String
  perfumeId  String
  createdAt  DateTime @default(now())
  gender     Int?
  longevity  Int?
  overall    Int?
  priceValue Int?
  sillage    Int?
  updatedAt  DateTime
  Perfume    Perfume  @relation(fields: [perfumeId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, perfumeId])
}

model UserPerfumeReview {
  id        String   @id
  userId    String
  perfumeId String
  review    String
  createdAt DateTime @default(now())
  Perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model UserPerfumeWishlist {
  id        String   @id
  userId    String
  isPublic  Boolean  @default(false)
  perfumeId String
  createdAt DateTime @default(now())
  Perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model WishlistNotification {
  id         String   @id
  userId     String
  perfumeId  String
  notifiedAt DateTime @default(now())
  Perfume    Perfume  @relation(fields: [perfumeId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, perfumeId])
}

enum HouseType {
  niche
  designer
  indie
  celebrity
  drugstore
}

enum PerfumeType {
  eauDeParfum
  eauDeToilette
  eauDeCologne
  parfum
  extraitDeParfum
  extraitOil
  oil
  waterMist
  ipmSpray
}

enum TradePreference {
  cash
  trade
  both
}

enum UserRole {
  user
  admin
  editor
}
